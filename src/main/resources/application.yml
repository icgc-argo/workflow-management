nextflow:
  cluster: # to determine the cluster the workflow will run in.
    cluster2:   # this property can be named as cluster 2 or anything else but the keys under it should not change.
      masterUrl: "localhost:8080/azure"
      context: "azure-context-name"
      volMounts:
        - "pv-claim:/some/dir/in/azure"
      pluginsDir: "/tmp/plugins"
    default:
      masterUrl: "localhost:8080/cumulus"
      context: # "default-context-name". When left blank then current-context will be used.
      volMounts:
        - "pv-claim:/some/dir/in/cumulus"
      pluginsDir: "/icgc-argo-scratch/plugins"
  k8s:
    runAsUser: 9999
    namespace: "default" # Namespace where app will be running
    runNamespace: "default" # Namespace where wes and nf pods will live
    imagePullPolicy: "IfNotPresent" # how K8s should pull a pod image for runs
    pluginsDir: "/icgc-argo-scratch/plugins" # where nextflow should copy plugins to for a run
    serviceAccount: "default"
    trustCertificate: false
  weblogUrl: "http://localhost"
  monitor:
    sleepInterval: 1000 # milliseconds
    maxErrorLogLines: 50 # we put the last ${maxErrorLogLines} into the error message if a Pod fails

secret:
  enabled: false

logging.level:
  com.pivotal: debug
  #  org.springframework: debug
  org.icgc.argo: debug

---
spring.config.activate.on-profile: apiKey

secret:
  enabled: true
  apiKey: testapikeytotallylegit

---
spring.config.activate.on-profile: oauth2Token

secret:
  enabled: true
  clientId: testId
  clientSecret: testSecret
  tokenUri: http://localhost:8080/oauth/token

---
rabbit:
  default-endpoint-name: standalone
  endpoints:
    standalone:
      host: localhost
      port: 5672
      username: user
      password: pass
    connection:
      retryMax: 5       #Maximum number of reconnection attempts
      timeout: 60s      #Total attempt time before terminating the application
      randomBackoff:
        firstBackoff: 2s  #Delay before first re-attempt
        maxBackoff: 10s   #Maximum delay on next attempts.

wes.consumer:
    queue: "execute-queue"
    topicExchange: "gatekeeper-out"
    topicRoutingKeys: "INITIALIZING, CANCELING" # comma separated Array of keys

---
spring.config.activate.on-profile: gatekeeper

gatekeeper.consumer:
    queue: "gatekeeper-in-queue"
    topicExchange: "gatekeeper-in"

gatekeeper.producer:
    topicExchange: "gatekeeper-out"

spring.cloud.stream:
  function.definition: weblogConsumer
  bindings:
    weblogConsumer-in-0:
      group: mgmt-weblogConsumer
      destination: weblog # kafka topic to listen to
      binder: kafka
  kafka:
    binder.brokers: localhost:9092
    bindings:
      weblogConsumer-in-0:
        consumer:
          enableDlq: true
          dlqName: weblog-into-mgmt_dlq
          autoCommitOnError: true
          autoCommitOffset: true
#          resetOffsets: true
#          startOffset: earliest

spring.datasource:
  url: jdbc:postgresql://localhost:5432/gatekeeperdb?stringtype=unspecified
  username: postgres
  password: mysecretpassword
spring.jpa:
  hibernate:
    ddl-auto: update

---
spring.config.activate.on-profile: test

spring.jpa:
  hibernate:
    ddl-auto: create-drop
