scalar JSON

type RunsResponse {
    runId: ID
}

input WorkflowEngineParams {
  defaultContainer: String
  revision: String
  resume: ID
  launchDir: String
  projectDir: String
  workDir: String
  latest: Boolean
}

input RunsRequest {
  workflowUrl: String!
  workflowEngineParams: WorkflowEngineParams
  workflowParams: JSON
  workflowType: String
  workflowTypeVersion: String
  tags: JSON
}

type Mutation {
    startRun(request: RunsRequest!): RunsResponse
    cancelRun(runId: ID!): RunsResponse
}

type SearchResultInfo {
    contentCount: String!
    hasNextFrom: String!
    totalHits: String!
}

type EngineParameters {
    launchDir: String
    projectDir: String
    resume: String
    revision: String
    workDir: String
    defaultContainer: String
    latest: String
}

type ActiveRun {
    runId: String!
    state: String!
    workflowUrl: String!
    workflowType:  String
    workflowTypeVersion:  String
    workflowParamsJsonStr:  String
    workflowEngineParams: EngineParameters!
    timestamp: String!
}

input Example {
  runId: String
  state: String
  workflowUrl: String
  workflowType:  String
  workflowTypeVersion:  String
  workflowParamsJsonStr:  String
  timestamp: String
}

type ActiveRunsSearchResult {
    content: [ActiveRun!]
    info: SearchResultInfo!
}

enum SortOrder {
    asc,
    desc
}

enum SortField {
    runId,
    state,
    timestamp
}

input Page {
    size: Int!
    from: Int!
}

input Sort {
    fieldName: SortField!
    order: SortOrder!
}

type Query {
    activeRuns(example: Example, page: Page, sorts: [Sort]): ActiveRunsSearchResult
}
